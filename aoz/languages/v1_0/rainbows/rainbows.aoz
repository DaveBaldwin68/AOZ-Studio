/*@*****************************************************************************
*                                                                              *
*   █████╗  ██████╗ ███████╗    ███████╗████████╗██╗   ██╗██████╗ ██╗ ██████╗  *
*  ██╔══██╗██╔═══██╗╚══███╔╝    ██╔════╝╚══██╔══╝██║   ██║██╔══██╗██║██╔═══██╗ *
*  ███████║██║   ██║  ███╔╝     ███████╗   ██║   ██║   ██║██║  ██║██║██║   ██║ *
*  ██╔══██║██║   ██║ ███╔╝      ╚════██║   ██║   ██║   ██║██║  ██║██║██║   ██║ *
*  ██║  ██║╚██████╔╝███████╗    ███████║   ██║   ╚██████╔╝██████╔╝██║╚██████╔╝ *
*  ╚═╝  ╚═╝ ╚═════╝ ╚══════╝    ╚══════╝   ╚═╝    ╚═════╝ ╚═════╝ ╚═╝ ╚═════╝  *
*                                                                              *
* This file is part of AOZ Studio.                                             *
* Copyright (c) AOZ Studio. All rights reserved.                               *
*                                                                              *
* Licensed under the GNU General Public License v3.0.                          *
* More info at: https://choosealicense.com/licenses/gpl-3.0/                   *
* And in the file AOZ_StudioCodeLicense.pdf.                                   *
*                                                                              *
*****************************************************************************@*/
/** @file
 *
 * The AOZ Rainbow Instruction Set
 * By Francois Lionet
 *
 * Using the new modular language syntax system
 * Program the language with the language.
 *
 * @author FL
 * @date first pushed on 27/10/2019
 */

//
// Initialization
//
{
    // Base initilizations
    this.banks = this.aoz.banks;
    this.utilities = this.aoz.utilities;
    this.aoz.rainbows = this;
	this.context = new AOZContext( this.aoz, this.aoz.currentContextName, { sorted: true } );
    this.mode = 'fast';

    // Rainbow class
    this.Rainbow = function( aoz, name, height, ink, red$, green$, blue$ )
    {
        this.aoz = root.aoz;
        this.name = name;
        this.options = options;
        this.rainbows = this.aoz.rainbows;

        this.position = null;
        this.dimension = null;
        this.ink = ink;
        this.offset = 0;
        this.zPosition = 0;
        this.calculate( red$, green$, blue$, height );
    }
    this.Rainbow.prototype.setDisplay = function( offset, y, height )
    {
        this.offset = typeof offset == 'undefined' ? this.offset : offset;
        if ( this.dimensions.height < 0 || this.offset < 0 )
            throw 'illegal_function_call'
        if ( this.rainbows.mode == 'fast' )
        {
            var screenDefinition = this.aoz.manifest.default.screen;
            screenDefinition.width = 32;
            screenDefinition.height = dimensions.height;
            screenDefinition.numberOfColors = 4;
            screenDefinition.pixelMode = 'lowres';
            screenDefinition.palette = [ '#000000', '#000000', '#000000', '#000000' ];
            this.screen = new Screen( this.aoz, this.aoz.renderer, this.aoz.currentContextName, screenDefinition );
            this.screen.setCursor( false );
            this.screen.setInk( 1 );
            this.screen.setScale( )
            this.screen.setDisplay( { y: y, height: height } );
            this.screen.show( false );
            this.redraw();
        }
    };
    this.Rainbow.prototype.render = function( )
    {
        if ( this.rainbows.mode == 'slow' )
        {
            var position = this.offset;
            for ( var y = 0; y < this.displayHeight; y++ )
            {
                var r = redBuffer[ position ];
                var g = greenBuffer[ position ];
                var b = blueBuffer[ position ];

                var data = this.imageData.data;
                for ( x = 0; x < this.lineWidth; x++ )
                {
                    var address = ( y * this.linewidth * + x ) * 4;
                    if ( data[ address ] == this.rIndex && data[ address + 1 ] == this.gIndex && data[ address + 2 ] == this.bIndex )
                    {
                        data[ address + 0 ] = r;
                        data1[ address + 1 ] = g;
                        data[ address + 2 ] = b;
                    }
                }
                if ( ++position > this.lineBuffers.length )
                    break;
            }
        }
    };
    this.Rainbow.prototype.redraw = function()
    {
        if ( this.rainbows.mode == 'fast' )
        {            
            // Redraw the screen?
            if ( this.offset != this.previousOffset )
            {
                // Redraw
                var bufferLength = this.redBuffer.length;
                var position = this.offset;
                for ( var y = 0; y < this.displayHeight; y++ )
                {
                    var r = this.redBuffer[ position ];
                    var g = this.greenBuffer[ position ];
                    var b = this.blueBuffer[ position ];

                    this.screen.setColor( 1, this.aoz.utilities.getRGBAString( r, g, b ) );
                    this.screen.drawLine( { x: 0, y: y }, { x: this.screen.width, y: y } );

                    if ( ++position >= bufferLength )
                        position = 0;
                }
                this.previousOffset = this.offset;
            }
        }
    };
    this.Rainbow.prototype.calculate = function( red$, green$, blue$, height )
    {
        if ( height < 0 )
            throw 'illegal_function_call';

        // Interprets the strings
        var red = interpret( red$ );
        var green = interpret( green$ );
        var blue = interpret( blue$ );

        // Calculates the values...
        this.redBuffer = calculate( red );
        this.greeBuffer = calculate( green );
        this.blueBuffer = calculate( blue );   

        var self = this;
        function interpret( string$ )
        {
            var definition = [];
            var destination = 0;
            var info = new self.Information( string$ );
            do
            {
                var c = info.getNextChar();
                if ( info.eol || c != '(' )
                    throw 'syntax_error_in_amal_string';

                var lines = info.getNumber();
                c = info.getNextChar();
                if ( info.eol || c != ',' )
                    throw 'syntax_error_in_amal_string';
                
                var delta = info.getNumber();
                c = info.getNextChar();
                if ( info.eol || c != ',' )
                    throw 'syntax_error_in_amal_string';

                var count = info.getNumber();
                c = info.getNextChar();
                if ( info.eol || c != ',' )
                    throw 'syntax_error_in_amal_string';

                definition[ destination ] = 
                {
                    lines: lines,
                    delta: delta,
                    count: count
                };
                destination++;
            } while( !info.eol );            
            return definition;
        };
        function calculate( definition, color )
        {
            var lineBuffer = [];
            var line, count;
            var position = 0;
            var line = 0;
            color = typeof color == 'undefined' ? 0 : color;
            do
            {
                for ( count = 0; count < definition[ position ].count ); count++ )
                {
                    for ( l = 0; l < definition[ position ].lines; l++ )
                    {
                        lineBuffer[ line++ ] = color;                
                    }
                    color += definition[ position++ ].delta;
                    color[ c ] &= 255;
                    position++;
                    if ( line > height )
                        break;
                }
                if 
                    break;
                if ( position > definition.length )
                    position = 0;
            } while( line < height );
            return lineBuffer;
        };
    };

    // Information object
    this.Information = function( line )
    {
        this.position = 0;
        this.line = line;
        this.eol = false;
    }
    this.Information.prototype.extractNumber = function()
    {
        this.skipSpaces();
        if ( this.eol )
            return;

        this.text = '';
        this.type = 'empty';
        var c = this.line.charAt( this.position );
        if ( c == '-' )
        {
            this.position++;
            this.skipSpaces();
            if ( this.eol )
                return;
            this.text += '-';
            c = this.line.charAt( this.position );
        }
        if ( this.aoz.utilities.getCharacterType( c ) == 'number' )
        {
            this.text += c;
            this.position++;
            while( this.position < this.line.length )
            {
                c = this.line.charAt( this.position );
                if ( !( ( c >= '0' && c <= '9' ) )
                    break;
                this.text += c;
                this.position++;
            }
            var value = parseInt( this.text );
            if ( isNaN( value ) )
                return undefined;
            return value;
        }
    };
    this.Information.prototype.skipSpaces = function()
    {
        this.eol = false;
        while( this.position < this.line.length && ( this.line.charCodeAt( this.position ) == 32 || this.line.charCodeAt( this.position ) == 9 ) )
            this.position++;
        if ( this.position >= this.line.length )
            this.eol = true;
    };
    this.Information.prototype.getNextChar = function()
    {
        var c = this.line[ this.position++ ];
        if ( this.position.length > this.line.length )
            this.eol = true;
        return c;
    };

    // Instructions...
    this.setRainbow = function( index, ink, height, red$, green$, blue$ )
    {
        #errors
        var rainbow = new this.Rainbow( this.aoz, 'rainbow_' + number, ink, height, red$, green$, blue$ );
        this.context.setElement( this.aoz.currentContextName, rainbow, index, true );
    };
    this.deleteRainbow = function( index )
    {
        #errors
        var rainbow = new this.Rainbow( this.aoz, 'rainbow_' + number, ink, height, red$, green$, blue$ );
        this.context.deleteElement( this.aoz.currentContextName, index, 'rainbow_not_found' );
    };
    this.getRainbow = function( index )
    {
        #errors
        return this.context.getElement( this.aoz.currentContextName, index, 'rainbow_not_found' );
    };
}

Instruction "set rainbow", _number, _index, _height, _red$, _green$, _blue$, _alpha$
{
    #errors
    this.aoz.rainbows.setRainbow( %_number, %_index, %_height, %_red$, %_green$, %_blue$, %_alpha$ );
}
End Instruction

Instruction "rainbow", _number, _offset, _vertical_position, _height
{
    #errors
    this.aoz.rainbows.getElement( this.aoz.currentContextName, %_number, 'rainbow_not_defined' ).setDisplay( %_offset, %_vertical_position, %_height );
}
End Instruction

Instruction "rainbow del", _index
{    
    #errors
    this.aoz.rainbows.deleteRainbow( this.aoz.currentContextName, %_index );
}
End Instruction

